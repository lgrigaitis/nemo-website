import Protobuf from 'pbf';
import { binaryToSpatialjson } from './spatialjson-utils';
import { TileReader } from './carto-spatial-tile';
const CartoSpatialTileLoader = {
  name: 'CARTO Spatial Tile',
  version: '1',
  id: 'cartoSpatialTile',
  module: 'carto',
  extensions: ['pbf'],
  mimeTypes: ['application/vnd.carto-spatial-tile', 'application/x-protobuf'],
  category: 'geometry',
  worker: false,
  parse: async (arrayBuffer, options) => parseCartoSpatialTile(arrayBuffer, options),
  parseSync: parseCartoSpatialTile,
  options: {}
};

function parsePbf(buffer) {
  const pbf = new Protobuf(buffer);
  const tile = TileReader.read(pbf);
  return tile;
}

function unpackProperties(properties) {
  if (!properties || !properties.length) {
    return [];
  }

  return properties.map(item => {
    const currentRecord = {};
    item.data.forEach(({
      key,
      value
    }) => {
      currentRecord[key] = value;
    });
    return currentRecord;
  });
}

function parseCartoSpatialTile(arrayBuffer, options) {
  if (!arrayBuffer) return null;
  const tile = parsePbf(arrayBuffer);
  const {
    cells
  } = tile;
  const data = {
    cells: { ...cells,
      properties: unpackProperties(cells.properties)
    }
  };
  return binaryToSpatialjson(data);
}

export default CartoSpatialTileLoader;
//# sourceMappingURL=carto-spatial-tile-loader.js.map