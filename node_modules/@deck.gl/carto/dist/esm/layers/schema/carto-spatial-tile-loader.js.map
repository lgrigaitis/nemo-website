{"version":3,"sources":["../../../../src/layers/schema/carto-spatial-tile-loader.ts"],"names":["Protobuf","binaryToSpatialjson","TileReader","CartoSpatialTileLoader","name","version","id","module","extensions","mimeTypes","category","worker","parse","arrayBuffer","options","parseCartoSpatialTile","parseSync","parsePbf","buffer","pbf","tile","read","unpackProperties","properties","length","map","item","currentRecord","data","forEach","key","value","cells"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,KAArB;AAIA,SAAQC,mBAAR,QAA2D,qBAA3D;AACA,SAAcC,UAAd,QAA+B,sBAA/B;AAEA,MAAMC,sBAAwC,GAAG;AAC/CC,EAAAA,IAAI,EAAE,oBADyC;AAE/CC,EAAAA,OAAO,EAAE,GAFsC;AAG/CC,EAAAA,EAAE,EAAE,kBAH2C;AAI/CC,EAAAA,MAAM,EAAE,OAJuC;AAK/CC,EAAAA,UAAU,EAAE,CAAC,KAAD,CALmC;AAM/CC,EAAAA,SAAS,EAAE,CACT,oCADS,EAET,wBAFS,CANoC;AAU/CC,EAAAA,QAAQ,EAAE,UAVqC;AAW/CC,EAAAA,MAAM,EAAE,KAXuC;AAY/CC,EAAAA,KAAK,EAAE,OAAOC,WAAP,EAAoBC,OAApB,KAAgCC,qBAAqB,CAACF,WAAD,EAAcC,OAAd,CAZb;AAa/CE,EAAAA,SAAS,EAAED,qBAboC;AAc/CD,EAAAA,OAAO,EAAE;AAdsC,CAAjD;;AAiBA,SAASG,QAAT,CAAkBC,MAAlB,EAA6C;AAC3C,QAAMC,GAAG,GAAG,IAAInB,QAAJ,CAAakB,MAAb,CAAZ;AACA,QAAME,IAAI,GAAGlB,UAAU,CAACmB,IAAX,CAAgBF,GAAhB,CAAb;AACA,SAAOC,IAAP;AACD;;AAED,SAASE,gBAAT,CAA0BC,UAA1B,EAA0E;AACxE,MAAI,CAACA,UAAD,IAAe,CAACA,UAAU,CAACC,MAA/B,EAAuC;AACrC,WAAO,EAAP;AACD;;AACD,SAAOD,UAAU,CAACE,GAAX,CAAeC,IAAI,IAAI;AAC5B,UAAMC,aAAyB,GAAG,EAAlC;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkB,CAAC;AAACC,MAAAA,GAAD;AAAMC,MAAAA;AAAN,KAAD,KAAkB;AAClCJ,MAAAA,aAAa,CAACG,GAAD,CAAb,GAAqBC,KAArB;AACD,KAFD;AAGA,WAAOJ,aAAP;AACD,GANM,CAAP;AAOD;;AAED,SAASZ,qBAAT,CACEF,WADF,EAEEC,OAFF,EAGsB;AACpB,MAAI,CAACD,WAAL,EAAkB,OAAO,IAAP;AAClB,QAAMO,IAAI,GAAGH,QAAQ,CAACJ,WAAD,CAArB;AAEA,QAAM;AAACmB,IAAAA;AAAD,MAAUZ,IAAhB;AACA,QAAMQ,IAAI,GAAG;AACXI,IAAAA,KAAK,EAAE,EAAC,GAAGA,KAAJ;AAAWT,MAAAA,UAAU,EAAED,gBAAgB,CAACU,KAAK,CAACT,UAAP;AAAvC;AADI,GAAb;AAIA,SAAOtB,mBAAmB,CAAC2B,IAAD,CAA1B;AACD;;AAED,eAAezB,sBAAf","sourcesContent":["import Protobuf from 'pbf';\nimport {LoaderOptions, LoaderWithParser} from '@loaders.gl/loader-utils';\n\nimport {KeyValueProperties} from './carto-tile';\nimport {binaryToSpatialjson, Properties, SpatialJson} from './spatialjson-utils';\nimport {Tile, TileReader} from './carto-spatial-tile';\n\nconst CartoSpatialTileLoader: LoaderWithParser = {\n  name: 'CARTO Spatial Tile',\n  version: '1',\n  id: 'cartoSpatialTile',\n  module: 'carto',\n  extensions: ['pbf'],\n  mimeTypes: [\n    'application/vnd.carto-spatial-tile',\n    'application/x-protobuf' // Back-compatibility\n  ],\n  category: 'geometry',\n  worker: false,\n  parse: async (arrayBuffer, options) => parseCartoSpatialTile(arrayBuffer, options),\n  parseSync: parseCartoSpatialTile,\n  options: {}\n};\n\nfunction parsePbf(buffer: ArrayBuffer): Tile {\n  const pbf = new Protobuf(buffer);\n  const tile = TileReader.read(pbf);\n  return tile;\n}\n\nfunction unpackProperties(properties: KeyValueProperties[]): Properties[] {\n  if (!properties || !properties.length) {\n    return [];\n  }\n  return properties.map(item => {\n    const currentRecord: Properties = {};\n    item.data.forEach(({key, value}) => {\n      currentRecord[key] = value;\n    });\n    return currentRecord;\n  });\n}\n\nfunction parseCartoSpatialTile(\n  arrayBuffer: ArrayBuffer,\n  options?: LoaderOptions\n): SpatialJson | null {\n  if (!arrayBuffer) return null;\n  const tile = parsePbf(arrayBuffer);\n\n  const {cells} = tile;\n  const data = {\n    cells: {...cells, properties: unpackProperties(cells.properties)}\n  };\n\n  return binaryToSpatialjson(data);\n}\n\nexport default CartoSpatialTileLoader;\n"],"file":"carto-spatial-tile-loader.js"}